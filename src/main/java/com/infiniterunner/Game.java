package com.infiniterunner;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;

/**
 *
 * @author Tomasz Baslyk
 */
public class Game extends javax.swing.JFrame {

    private GamePanel gpnl;

    /**
     * Creates new form Game
     */
    public Game() {

        gpnl = new GamePanel();
        add(gpnl);
        initComponents();
        initFrame();
    }

    public void initFrame() {

        setTitle("Infinite Runner");
        setResizable(false);
        setSize(800, 600);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(Game.class.getResource("/com/infiniterunner/dinoicon.png")));
        
        radmniHitbox.setSelected(false);
        radmniPause.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnbMain = new javax.swing.JMenuBar();
        mnAbout = new javax.swing.JMenu();
        mnOptions = new javax.swing.JMenu();
        mniRestart = new javax.swing.JMenuItem();
        radmniPause = new javax.swing.JRadioButtonMenuItem();
        radmniHitbox = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        mnAbout.setText("About");
        mnbMain.add(mnAbout);

        mnOptions.setText("Options");

        mniRestart.setText("Restart");
        mniRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRestartActionPerformed(evt);
            }
        });
        mnOptions.add(mniRestart);

        radmniPause.setSelected(true);
        radmniPause.setText("Pause");
        radmniPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radmniPauseActionPerformed(evt);
            }
        });
        mnOptions.add(radmniPause);

        radmniHitbox.setSelected(true);
        radmniHitbox.setText("Show hitbox (experimental)");
        radmniHitbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radmniHitboxActionPerformed(evt);
            }
        });
        mnOptions.add(radmniHitbox);

        mnbMain.add(mnOptions);

        setJMenuBar(mnbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            gpnl.drawJump();
        }
    }//GEN-LAST:event_formKeyPressed

    private void mniRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRestartActionPerformed
        gpnl.restart();
    }//GEN-LAST:event_mniRestartActionPerformed

    private void radmniHitboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radmniHitboxActionPerformed
        
        if (radmniHitbox.isSelected() == true) {
            gpnl.hitboxToggle(true);
        } else {
            gpnl.hitboxToggle(false);
        }
    }//GEN-LAST:event_radmniHitboxActionPerformed

    private void radmniPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radmniPauseActionPerformed
        
        if (radmniPause.isSelected() == true) {
            gpnl.pauseToggle(true);
        } else {
            gpnl.pauseToggle(false);
        }
    }//GEN-LAST:event_radmniPauseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu mnAbout;
    private javax.swing.JMenu mnOptions;
    private javax.swing.JMenuBar mnbMain;
    private javax.swing.JMenuItem mniRestart;
    private javax.swing.JRadioButtonMenuItem radmniHitbox;
    private javax.swing.JRadioButtonMenuItem radmniPause;
    // End of variables declaration//GEN-END:variables
}
